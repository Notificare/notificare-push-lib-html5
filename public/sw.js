/*!
 * Notificare -  v2.7.3 (https://notificare.com)
 * Copyright 2012 - 2023 Notificare
 */
var isReady=!1;function handleNotificationClick(c){return new Promise(function(e,a){ensureOpenClient(c).then(function(){self.clients.matchAll({type:"window"}).then(function(t){if(!t)return a(new Error("Notificare: Unable to process the notification click. No active clients..."));var n=t[0],i=c.notification.data.urlFormatString.replace("%@",c.notification.tag);n&&"focus"in n&&(c.action?n.postMessage(JSON.stringify({cmd:"notificationreply",message:c.notification.tag,action:c.action,bg:!1})):n.postMessage(JSON.stringify({cmd:"notificationclick",message:c.notification.tag,url:i})),n.focus().then(e).catch(e))}).catch(a)}).catch(a)})}function ensureOpenClient(a){return new Promise(function(i,e){self.clients.matchAll({type:"window"}).then(function(t){if(t.length)return isReady?i():waitForClient().then(i).catch(e);isReady=!1;var n=a.notification.data.urlFormatString.replace("%@",a.notification.tag);self.clients.openWindow(n).then(function(){waitForClient().then(i).catch(e)}).catch(e)}).catch(e)})}function waitForClient(){return new Promise(function(n,i){self.clients.matchAll({type:"window"}).then(function(t){if(t.length&&isReady)return n();sleep(1e3).then(function(){waitForClient().then(n).catch(i)}).catch(i)}).catch(i)})}function sleep(n){return new Promise(function(t){setTimeout(t,n)})}self.addEventListener("push",function(n){try{var i=n.data.json();if(i["x-sender"]&&"notificare"===i["x-sender"])if(i.alert){if(navigator.setAppBadge&&navigator.setAppBadge(i.badge||0),i.actions&&i.actions.length){var e=[];i.actions.forEach(function(t){e.push({title:t.label,action:t.label,icon:t.icon?t.icon:null})})}self.clients.matchAll().then(function(t){t.forEach(function(t){t.postMessage(JSON.stringify({cmd:"notificationreceive",message:i.id}))})});var t=i.icon;"image"in Notification.prototype||(t=i.attachment&&i.attachment.uri?i.attachment.uri:i.icon),n.waitUntil(self.registration.showNotification(i.alertTitle||i.application,{body:i.alert,icon:t,tag:i.id,actions:e,data:i,requireInteraction:i.requireInteraction,renotify:i.renotify,image:i.attachment&&i.attachment.uri?i.attachment.uri:null,sound:i.sound?i.sound:null}))}else i.system?n.waitUntil(self.clients.matchAll().then(function(t){t.forEach(function(t){t.postMessage(JSON.stringify({cmd:"system",message:i}))})})):n.waitUntil(self.clients.matchAll().then(function(t){t.forEach(function(t){t.postMessage(JSON.stringify({cmd:"notificationreceive",message:i.id}))})}));else n.waitUntil(self.clients.matchAll().then(function(t){t.forEach(function(t){t.postMessage(JSON.stringify({cmd:"unknownpush",message:i}))})}))}catch(t){n.waitUntil(self.clients.matchAll().then(function(t){t.forEach(function(t){t.postMessage(JSON.stringify({cmd:"workerpush",message:i}))})}))}}),self.addEventListener("notificationclick",function(t){t.notification.close(),t.waitUntil(handleNotificationClick(t))}),self.addEventListener("activate",function(t){clients.claim(),clients.matchAll().then(function(t){t.forEach(function(t){t.postMessage(JSON.stringify({cmd:"activate"}))})})}),self.addEventListener("pushsubscriptionchange",function(t){clients.claim(),clients.matchAll().then(function(t){t.forEach(function(t){t.postMessage(JSON.stringify({cmd:"pushsubscriptionchange"}))})})}),self.addEventListener("install",function(t){t.waitUntil(self.skipWaiting())}),self.addEventListener("message",function(t){if(t&&t.data)try{switch(JSON.parse(t.data).action){case"init":break;case"re.notifica.ready":isReady=!0;break;default:console.log(t)}}catch(t){console.log(t)}});